<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TID</title>
</head>

<body>

  <%- include("partials/header"); %>
  <div id="loading"><img src="/assets/loading.gif" alt="" srcset=""></div>

  <div id="teamWrapper">

    <div id="left">
      <h1 id="createTeamHead">Create Team</h1>

      <div class="form-container">
        <label for="eventSelect">Team Events</label>
        <% if (event){ %>
        <select name="eventSelect" id="eventSelect">
          <option value="">Select</option>
          <% for (const i in event){ %>
          <option value="<%= event[i].event %>"><%= event[i].event %></option>
          <%}%>
        </select>
        <% } %>
      </div>

      <div class="form-container">
        <h1>Add Members</h1>
        <label for="pidinp">Add PID</label>
        <input type="text" name="pidInp" id="pidinp" required>
        <button name="btn" id="btn">Add</button>
      </div>

      <button id="saveTeamBtn">Save Team</button>

      <div id="error"></div>
    </div>

    <!-- middle section     -->
    <div id="middle">
      <h1>Members</h1>

      <table id="pidTable">
        <tr>
          <th>PID</th>
          <th>Name</th>
          <th>Branch</th>

        </tr>



      </table>
    </div>

    <div id="right">
      <h1>Search PID/TID</h1>

      <form action="/searchPIDtid" method="POST">
        <input type="text" name="pid" placeholder="Search PID or TID" required id="pid">

        <input type="submit" value="Submit" id="pidSubmit">
      </form>

      <% if (search) {%>
      <table>
        <tr>
          <th>TID</th>
          <th>Event</th>
          <th>Members</th>
          <th>Delete</th>
        </tr>


        <% for (const i in search){%>
        <tr>
          <td>
            <%= search[i]['tid']%>
          </td>
          <td>
            <%= search[i]['event']%>
          </td>
          <td>
            <%= search[i]['members']%>
          </td>
          <td>
            <a href="/deleteTeam/<%= search[i]['tid']%>" id="delA">X</a>

          </td>
        </tr>
        <% } %>



      </table>
      <% }%>



      <h1 id="head"></h1>
      <div id="content">
        <p id="p1"></p>
        <p id="p2"></p>
        <p id="p3"></p>
      </div>

      <a href="" id="teamDel"></a>

    </div>
  </div>





  <style>
    #loading {
      text-align: center;

      padding: 5px;
      display: none;




    }

    #loading img {
      height: 300px;
      width: 300px;
      transform: translate(-50%, 50%);
      position: absolute;

    }

    /* General styles */
    body {
      font-family: Arial, sans-serif;

      margin: 0;
      padding: 0;
    }

    #createTeamHead {
      color: blue;
    }

    #teamWrapper {
      display: flex;
      justify-content: space-around;
      margin-top: 15px;

    }

    #left {
      background-color: #f4f4f4;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      width: 400px;
    }

    .form-container {
      margin-bottom: 20px;
    }

    .form-container h1 {
      color: blue;
    }

    .form-container label {
      display: block;
      margin-bottom: 5px;
      color: #333;
    }

    .form-container select,
    .form-container input[type="text"] {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border-radius: 4px;
      border: 1px solid #ccc;
    }

    .form-container button {
      padding: 8px 20px;
      border: none;
      border-radius: 4px;
      background-color: #007bff;
      color: #fff;
      cursor: pointer;
    }

    #saveTeamBtn {
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      background-color: #28a745;
      color: #fff;
      cursor: pointer;
      margin-top: 20px;
    }




    /* middle table */
    #middle {
      background-color: #f4f4f4;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      width: 350px;
    }

    #middle h1 {
      color: rgb(255, 119, 0)
    }

    #middle th,
    #right th {
      background-color: rgb(218, 158, 46);

    }

    #middle td,
    #right td {
      font-size: 13px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      border-radius: 10px;
      overflow: hidden;
    }

    th,
    td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
      max-width: 200px;
      /* Adjust as needed */
      word-wrap: break-word;
      overflow-wrap: break-word;

    }

    th {

      font-weight: bold;
      color: white;

    }

    tr {
      border-radius: 10px;
    }

    tr:nth-child(odd) {
      background-color: #fffcc4;
    }


    #right {
      background-color: #f4f4f4;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      width: 450px;
      height: 600px;
    }

    #right h1 {
      color: red;
    }

    #Red {
      color: red;
    }

    #Green {
      color: green;
    }

    input,
    select {
      width: auto;
      padding: 7px;

      border-radius: 4px;
      border: 1px solid #ccc;
    }



    button {
      width: 100%;
      padding: 10px;
      border: none;
      border-radius: 5px;
      background-color: #007bff;
      color: white;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    label {
      font-weight: bold;
    }

    button:hover {
      background-color: #0056b3;
    }

    #error {
      color: white;
      font-size: 20px;
      font-weight: bold;
      color: red;
      text-align: center;
      margin-top: 30px;


    }

    #teamDel {
      text-decoration: none;
      color: red;
      font-size: 20px;
      font-weight: bold;

    }

    #teamDel:hover {
      display: inline-block;
      padding: 8px 16px;
      text-decoration: none;
      background-color: #ff0000;
      color: #fff;
      border-radius: 5px;
      transition: background-color 0.3s ease;
    }

    #delA {
      display: inline-block;
      padding: 8px 16px;
      text-decoration: none;
      background-color: #ff0000;
      color: #fff;
      border-radius: 5px;
      transition: background-color 0.3s ease;
    }

    #pidSubmit {
      background-color: blueviolet;
      color: white;
      padding: 10px;
      border: none;
    }

    #pid {
      padding: 10px;

    }
  </style>





  <script>
    const pids = []

    let eventMax;
    //team Header
    const teamH1 = document.getElementById("createTeamHead")

    //add button

    const btn = document.getElementById("btn");
    btn.addEventListener("click", addData);

    //save Team Btn

    const saveTeam = document.getElementById("saveTeamBtn")
    saveTeam.addEventListener("click", saveTeamEvent);

    //pid result table
    const table = document.getElementById("pidTable")

    //team event dropdown
    const teamDrop = document.getElementById("eventSelect")
    teamDrop.addEventListener("change", getMax);


    const error = document.getElementById("error");

    //TID Result
    const tidR = document.getElementById("tid")
    const tidMem = document.getElementById("tidMembers")
    const evnt = document.getElementById("event")

    const del = document.getElementById("teamDel")


    //loading
    const loading = document.getElementById('loading');

    // Function to display loading icon and hide content
    async function showLoading() {
      loading.style.display = 'block';

    }

    // Function to hide loading icon and display content
    async function hideLoading() {
      loading.style.display = 'none';

    }

    //function to check the condition for participation for different students
    async function checkParticipationCondition(pid) {

      const options = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({

          pid: pid
        }),
      };



      try {


        const response = await fetch("http://localhost:3000/checkTeamCondition", options);
        const result = await response.json();

        return result;

      } catch (error) {
        console.error('Error during POST request:', error);

      }


    }

    async function clearGenerateHTMLForTID() {
      del.innerHTML = ""
      error.innerHTML = ""
      head.innerHTML = ""
      p1.innerHTML = ""
      p2.innerHTML = ""
      p3.innerHTML = ""

    }
    //function to check whether pid is added in the same team event

    async function generateHTMLForTID(data, saveData) {

      const head = document.getElementById("head")
      const p1 = document.getElementById("p1")
      const p2 = document.getElementById("p2")
      const p3 = document.getElementById("p3")

      if (data) {
        const members = data['members'].join(" ,")



        del.innerHTML = "Delete"
        del.href = "deleteTeam/" + data['tid']

        head.innerHTML = "Team Alredy Exists!"
        p1.innerHTML = "<b>TID</b>: " + data['tid']
        p2.innerHTML = "<b>Event</b>: " + data['event']
        p3.innerHTML = "<b>Members</b>: " + members
      }


      if (saveData) {


        const members = saveData['message']['members'].join(",")



        del.innerHTML = "Delete"
        del.href = "deleteTeam/" + saveData['message']['tid']

        head.innerHTML = "Team Registered Successfully!"
        p1.innerHTML = "<b>TID</b>: " + saveData['message']['tid']
        p2.innerHTML = "<b>Event</b>: " + saveData['message']['event']

        p3.innerHTML = "<b>Members</b>: " + members




      }




    }

    async function isPIDregisteredWithSameEvent(pid) {
      const event = teamDrop.value


      if (event) {
        const options = {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            event: event,
            pid: pid,
          }),
        };

        try {


          const response = await fetch("http://localhost:3000/checkPidTeam", options);
          const result = await response.json();

          if (result) {
            //if it returns the result 

            return result;
          }
        } catch (error) {
          console.error('Error during POST request:', error);

        }
      } else {
        // Handle the case when event is not defined
        return false;
      }
    }



    async function saveTeamEvent() {
      console.log(pids)

      //function to save data to teamEvents
      if (!eventMax) {
        //check whether event is selected
        return error.innerHTML = "Please Select Event!"
      }



      if (pids.length === 0) {
        return error.innerHTML = "Please add PID!"
      }



      console.log("save Team", pids)

      const data = pids
      const options = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'

        },
        body: JSON.stringify({
          event: teamDrop.value,
          data: data
        })
      };

      try {

        const send = await fetch("http://localhost:3000/saveTeam", options).then(response => response.json())
          .then(async result => {

            await clearHTML();

            //display the TID of the team after saving the team


            await generateHTMLForTID(null, result)

            //tidR.innerHTML=result['message']['tid']
            error.innerHTML = "Team Successfully Saved!"
            console.log('POST request successful:', result);

            //after saving the team clear the array
            pids.length = 0


          })
          .catch(error => {
            console.error('Error during POST request:', error);
          });

      } catch (error) {
        console.log(error)
      }

    }

    // function createTidRes(result) {
    //   //function to generate html when we save team events 

    //   let members = result['message']['members'].join(",")
    //   tidR.innerHTML = "TID: " + result['message']['tid']
    //   tidMem.innerHTML = "Members: " + members
    //   evnt.innerHTML = "Event: " + result['message']['event']



    // }

    async function getMax() {

      await clearHTML();


      const val = teamDrop.value

      console.log("Fn called", val)

      if (val) {
        teamH1.innerHTML = "Create Team: " + val
        try {
          // Make a GET request to a URL
          const response = await fetch('http://localhost:3000/getMax/' + val);

          // Check if the request was successful (status code 200)
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }


          // Parse the response JSON
          const data = await response.json();
          console.log(data)
          eventMax = data


        } catch (error) {
          console.error('Fetch error:', error);

        }

      } else {
        eventMax = 0
        teamH1.innerHTML = "Create Team"
      }

    }



    //function to add PID in the table 
    async function addData() {

      await showLoading();



      try {

        //clear the previous TID exists data
        await clearGenerateHTMLForTID()




        let pid = document.getElementById("pidinp").value




        if (await !eventMax) {
          //check whether event is selected
          await hideLoading()
          return error.innerHTML = "Please Select Event!"
        }

        if (await !pid) {
          //if the pid input is empty
          await hideLoading()
          return error.innerHTML = "Please Enter PID!"
        }

        //check whether you are not adding same pid to team event

        if (await pids.includes(pid)) {
          //if we are trying to add same PID
          await hideLoading()
          return error.innerHTML = "PID already added!"
        }

        //check whether the team limit exceeded

        if (await pids.length >= await eventMax['data']) {
          await hideLoading()
          return error.innerHTML = "Event Limit Exceeded!"
        }



        pid = pid.toUpperCase()

        //fetch details of the PID
        const data = await fetchData(pid);

        if (data['student'] === "Not Found") {
          //if the server return not found
          await hideLoading()
          return error.innerHTML = "NO PID Found!"
        } 
        
        else {
          //if the pid is found


          //new logic 

          const pidExists = await isPIDregisteredWithSameEvent(pid);

          if (pidExists['status']) {
            //if the PID is registered with same event

            error.innerHTML = "PID already In the team!"
            console.log("pid exists", pidExists['data'])
            await generateHTMLForTID(pidExists['data'], null)

          } else {
            //if the PID is not registered same event

            //check the roles of student for participation
            const studentRoleVerify = await checkParticipationCondition(pid);

            console.log("role verify", studentRoleVerify)

            if (studentRoleVerify['status']) {
              //if the role is verified and user is allowed to participate
              pids.push(pid)
              await createHTML(data)


            } else {
              //if the role is not verified and PID not registered with the  event
              console.log(pidExists['data'])


              error.innerHTML = studentRoleVerify['data']
            }


          }
          await hideLoading()



        }
      }



      catch(error){
        await hideLoading()
        console.log("Add Data Error: ",error)
      }

      // //check the roles of student for participation
      // const studentRoleVerify = await checkParticipationCondition(pid);

      // console.log("verify", studentRoleVerify)

      // if (studentRoleVerify['status']) {

      //   const data1 = await isPIDregisteredWithSameEvent(pid);
      //   if (data1) {
      //     error.innerHTML = "PID already In the team!"
      //     console.log(data1['data'])
      //     await generateHTMLForTID(data1['data'], null)
      //   } else {
      //     await createHTML(data)
      //     pids.push(pid)
      //   }

      // } else {
      //   const data1 = await isPIDregisteredWithSameEvent(pid);
      //   console.log("data1 after role", data1)
      //   if (data1) {
      //     await generateHTMLForTID(data1['data'], null)
      //   }

      //   error.innerHTML = studentRoleVerify['data']
      // }




    }

    async function createHTML(data) {
      //function to create dynamic HTML

      const tr = document.createElement('tr');

      const td1 = document.createElement('td');
      const td2 = document.createElement('td');
      const td3 = document.createElement('td');

      td1.textContent = data['student']['pid']
      td2.textContent = data['student']['name']
      td3.textContent = data['student']['branch']

      tr.appendChild(td1);
      tr.appendChild(td2);
      tr.appendChild(td3);

      table.appendChild(tr);
    }

    async function clearHTML() {

      //clear html table and pids array to 0
      pids.length = 0


      // Get all rows in the table
      const rows = table.getElementsByTagName("tr");
      for (let i = 0; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName("td");

        // Loop through each td element in the row and remove it
        for (let j = cells.length - 1; j >= 0; j--) {
          rows[i].removeChild(cells[j]);
        }
      }


    }

    async function fetchData(pid) {
      //function to fetch data of the pid


      try {
        // Make a GET request to a URL
        const response = await fetch('http://localhost:3000/pid/' + pid);

        // Check if the request was successful (status code 200)
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        // Parse the response JSON
        const data = await response.json();

        return data

      } catch (error) {
        console.error('Fetch error:', error);

      }
    }
  </script>

</body>

</html>